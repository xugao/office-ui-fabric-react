import { IKeyframes, IStyle } from '@fluentui/merge-styles';
import { AnimationStyles, Theme } from '@fluentui/theme';
import { useTheme } from './useTheme';
import { useWindow } from '@fluentui/react-window-provider';
import { useStyleRenderer } from './styleRenderers/useStyleRenderer';
import { StyleRenderer } from './styleRenderers/types';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const graphGet = (graphNode: Map<any, any>, path: any[]): any | undefined => {
  for (const key of path) {
    graphNode = graphNode.get(key);

    if (!graphNode) {
      return;
    }
  }

  return graphNode;
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const graphSet = (graphNode: Map<any, any>, path: any[], value: any) => {
  for (let i = 0; i < path.length - 1; i++) {
    const key = path[i];

    let current = graphNode.get(key);

    if (!current) {
      current = new Map();

      graphNode.set(key, current);
    }

    graphNode = current;
  }

  graphNode.set(path[path.length - 1], value);
};

/** Options that can be provided to the hook generated by `makeStyles`. */
export type UseStylesOptions = {
  theme?: Theme;
  renderer?: StyleRenderer;
};

export interface AnimationStyles {
  keyframes: IKeyframes;
  duration: string;
  timingFunction: string;
  fillMode?: string;
}
export type Animations = { [key: string]: AnimationStyles };

/**
 * Registers a css object, optionally as a function of the theme.
 *
 * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`
 * and returns a css javascript object.
 */
export function makeAnimations(
  styleOrFunction: Animations | ((theme: Theme) => Animations),
): (options?: UseStylesOptions) => { [key in keyof Animations]: string } {
  // Create graph of inputs to map to output.
  const graph = new Map();

  return (options: UseStylesOptions = {}) => {
    let { theme, renderer } = options;
    const win = useWindow();
    const contextualTheme = useTheme();
    const contextualRenderer = useStyleRenderer();

    theme = theme || contextualTheme || {};
    renderer = (renderer || contextualRenderer) as StyleRenderer;

    const id = renderer.getId();
    const isStyleFunction = typeof styleOrFunction === 'function';
    const path = isStyleFunction ? [id, win, theme] : [id, win];
    let value = graphGet(graph, path);

    if (!value) {
      const userStyles: Animations = isStyleFunction
        ? (styleOrFunction as (theme: Theme) => Animations)(theme!)
        : (styleOrFunction as Animations);
      const styles = { ...userStyles };
      const rendererOptions = { targetWindow: win, rtl: !!theme!.rtl };

      const finalStyles: { [key: string]: IStyle } = {};
      Object.keys(styles).forEach((key: string) => {
        const currStyle = styles[key];
        const animationName = renderer?.renderKeyframes(currStyle.keyframes, rendererOptions);
        const animationStyle: IStyle = {
          animationName,
          animationDuration: currStyle.duration,
          animationTimingFunction: currStyle.timingFunction,
          animationFillMode: currStyle.fillMode,
        };
        finalStyles[key] = animationStyle;
      });

      value = renderer.renderStyles(finalStyles, rendererOptions);
      graphSet(graph, path, value);
    }

    return value;
  };
}
