@import '../../common/themeCssVariables';
@import '../../common/highContrast';
@import '../../common/focusBorder';

$checkboxSize: 20px;
$checkboxTransitionDuration: 200ms;
$checkboxTransitionTiming: cubic-bezier(0.4, 0, 0.23, 1);

:root {
  --checkbox-test: 20px;
}
.root {
  position: relative;
  display: flex;

  &:not(.disabled) {
    &:not(.checked) {
      &:hover {
        .checkbox {
          border-color: var($semanticColorsInputBorderHovered);

          @include high-contrast {
            border-color: Highlight;
          }
        }
      }

      &:focus {
        .checkbox {
          border-color: var($semanticColorsInputBorderHovered);
        }
      }

      &:hover {
        .checkmark {
          color: var($paletteNeutralSecondary);
          opacity: 1;

          @include high-contrast {
            border-color: Highlight;
            color: Highlight;
          }
        }
      }
    }

    &.checked:not(.indeterminate) {
      &:hover,
      &:focus {
        .checkbox {
          background: var($semanticColorsInputBackgroundCheckedHovered);
          border-color: var($semanticColorsInputBackgroundCheckedHovered);
        }
      }

      @include high-contrast {
        &:hover .checkbox {
          background: Window;
          border-color: Highlight;
        }

        &:focus .checkbox,
        &:focus:hover .checkbox {
          background: Highlight;
        }

        &:focus:hover .checkmark {
          color: Window;
        }

        &:hover .checkmark {
          color: Highlight;
        }
      }
    }

    &.indeterminate {
      &:hover {
        .checkbox,
        .checkbox:after {
          border-color: var($semanticColorsInputBackgroundCheckedHovered);

          @include high-contrast {
            border-color: WindowText;
          }
        }

        .checkmark {
          opacity: 0;
        }
      }

      &:focus {
        .checkbox {
          border-color: var($semanticColorsInputBackgroundCheckedHovered);
        }
      }
    }
  }
}

.input {
  position: absolute;
  background: none;
  opacity: 0;

  @include focus(true) {
    + .label:before {
      outline: 1px solid var($paletteNeutralSecondary);
      outline-offset: 2px;

      @include high-contrast {
        outline: 1px solid ActiveBorder;
      }
    }
  }
}

.label {
  @include fonts-medium;

  display: flex;
  align-items: flex-start;
  cursor: pointer;
  position: relative;
  user-select: none;

  &:before {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    content: '';
    pointer-events: none;
  }

  &.isUsingCustomLabelRender {
    align-items: center;
  }

  &.disabled {
    cursor: default;
  }

  &.reversed {
    flex-direction: row-reverse;
    justify-content: flex-end;
  }
}

.checkbox {
  position: relative;
  display: flex;
  flex-shrink: 0;
  align-items: center;
  justify-content: center;
  height: $checkboxSize;
  width: $checkboxSize;
  border: 1px solid var($paletteNeutralPrimary);
  border-radius: var($effectsRoundedCorner2);
  box-sizing: border-box;
  transition-property: background, border, border-color;
  transition-duration: $checkboxTransitionDuration;
  transition-timing-function: $checkboxTransitionTiming;

  @include high-contrast-edge-chromium-no-adjust;
  @include high-contrast {
    border-color: WindowText;
  }

  /* in case the icon is bigger than the box */
  overflow: hidden;

  &.indeterminate {
    border-color: var($semanticColorsInputBackgroundChecked);

    @include high-contrast {
      border-color: WindowText;
    }

    &::after {
      content: '';
      border-radius: var($effectsRoundedCorner2);
      position: absolute;
      width: 10px;
      height: 10px;
      top: 4px;
      left: 4px;
      box-sizing: border-box;
      border-width: 5px;
      border-style: solid;
      border-color: var($semanticColorsInputBackgroundChecked);
      transition-property: background, border, border-color;
      transition-duration: $checkboxTransitionDuration;
      transition-timing-function: $checkboxTransitionTiming;

      @include high-contrast {
        border-color: WindowText;
      }
    }

    &.disabled::after {
      border-color: var($semanticColorsDisabledBodySubtext);
    }
  }

  // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender
  // is used, there will be only a 4px margin from checkbox to label. The label by default would have
  // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two
  // (and move it into the text) to not incur a breaking change for everyone using custom render atm.
  &.reversed {
    margin-left: 4px;
  }
  &:not(.reversed) {
    margin-right: 4px;
  }

  &.checked:not(.disabled):not(.indeterminate) {
    background: var($semanticColorsInputBackgroundChecked);
    border-color: var($semanticColorsInputBackgroundChecked);

    @include high-contrast {
      background: Highlight;
      border-color: Highlight;
    }
  }

  &.disabled {
    border-color: var($semanticColorsDisabledBodySubtext);

    @include high-contrast {
      border-color: GrayText;
    }
  }

  &.checked.disabled {
    background: var($semanticColorsDisabledBodySubtext);
    @include high-contrast {
      background: Window;
    }
  }
}

.checkmark {
  color: var($semanticColorsInputForegroundChecked);
  opacity: 0;

  @include high-contrast {
    color: Window;
    -ms-high-contrast-adjust: none;
  }

  &.checked {
    opacity: 1;
  }

  &.disabled {
    @include high-contrast {
      color: GrayText;
    }
  }
}

.text {
  color: var($semanticColorsBodyText);
  font-size: var($fontsMediumFontSize);
  line-height: 20px;

  @include high-contrast-edge-chromium-no-adjust;
  @include high-contrast {
    color: WindowText;
  }

  &.disabled {
    color: var($semanticColorsDisabledText);

    @include high-contrast {
      color: GrayText;
    }
  }

  &.reversed {
    margin-right: 4px;
  }
  &:not(.reversed) {
    margin-left: 4px;
  }
}
